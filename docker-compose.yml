services:
  #  nginx:
  #    container_name: nginx
  #    image: nginx:alpine
  #    ports:
  #      - "80:80"
  #    depends_on:
  #      - api
  #    volumes:
  #      - ./_docker/nginx/conf.d:/etc/nginx/conf.d
  #    networks:
  #      - nginx-network

  api:
    container_name: api
    image: futarin-api
    environment:
      - IS_DEV_MODE=0
    env_file:
      - .env
    build:
      context: .
      args:
        - ENV=production
      dockerfile: _docker/api/Dockerfile
    ports:
      - "80:80"
    expose:
      - 8000
    networks:
      - nginx-network

  mysql:
    # build:
    #   context: .
    #   dockerfile: _docker/db/Dockerfile
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      TZ: ${TZ}
    # volumes:
    #   - ./_docker/db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      # - ./_docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
      # - ./_docker/db/sql:/docker-entrypoint-initdb.d
    ports:
      - 3306:3306

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    environment:
      - PMA_HOST=mysql
    ports:
      - 8080:80

        #  azurite:
        #    image: mcr.microsoft.com/azure-storage/azurite
        #    ports:
        #      - "10000:10000" # Blob
        #    volumes:
        #      - ./data:/data
        #    command: "azurite-blob --blobHost 0.0.0.0 --location /data --debug /data/debug.log"

networks:
  nginx-network:
    driver: bridge


